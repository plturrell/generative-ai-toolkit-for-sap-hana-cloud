version: '3.8'

services:
  # API service with Neural Additive Models (NAM) support
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "9090:9090"
    restart: unless-stopped
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      # NAM optimization settings
      - ENABLE_GPU_ACCELERATION=false
      - ENABLE_NAM_VISUALIZATION=true
      - ENABLE_NAM_FEATURE_IMPORTANCE=true
      - BATCH_SIZE=16
      - MAX_SEQUENCE_LENGTH=512
      # Authentication settings
      - AUTH_REQUIRED=false
      - API_KEYS=
      # Performance settings
      - RATE_LIMIT_PER_MINUTE=100
      - CONNECTION_POOL_SIZE=20
      - DEFAULT_TIMEOUT=60
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=9090
      # CORS settings
      - CORS_ORIGINS=*
      - ENFORCE_HTTPS=false
      # Logging settings
      - LOG_REQUESTS=true
      - LOG_RESPONSES=false
      - LOG_PERFORMANCE=true
      - DETAILED_ERROR_RESPONSES=true
      # NAM Design System
      - ENABLE_NAM_DESIGN_SYSTEM=true
      - NAM_DESIGN_THEME=light
      - NAM_DESIGN_ANIMATION_ENABLED=true
    volumes:
      - ./api:/app/api
      - ./src:/app/src
      - ./tests:/app/tests
      - ./test_results:/app/test_results
      - model_cache:/app/model_cache
      - nam_visualizations:/app/nam_visualizations
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  # Frontend service with Nginx and NAM Design System
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - nam-visualizer
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./src/hana_ai/tools/hana_ml_tools/nam_design_system:/usr/share/nginx/html/nam_design_system
    environment:
      - API_URL=http://api:8000
      - NAM_VISUALIZER_URL=http://nam-visualizer:8050
      - NAM_DESIGN_THEME=light
      - ENABLE_ANIMATIONS=true
    restart: unless-stopped
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus
    ports:
      - "9091:9090"  # Map to different port to avoid conflict with API metrics
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/t4_gpu_alert_rules.yml:/etc/prometheus/t4_gpu_alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.enable-lifecycle  # Enable runtime reloading of configuration
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  
  # NAM visualization service
  nam-visualizer:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "src.hana_ai.tools.hana_ml_tools.nam_visualizer_tools"]
    ports:
      - "8050:8050"
    environment:
      - ENABLE_NAM_VISUALIZATION=true
      - NAM_DESIGN_THEME=light
      - NAM_DESIGN_ANIMATION_ENABLED=true
    volumes:
      - ./src:/app/src
      - nam_visualizations:/app/nam_visualizations
    depends_on:
      - api
    restart: unless-stopped
  
  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./deployment/nvidia-t4/grafana/t4-gpu-dashboard.json:/etc/grafana/provisioning/dashboards/t4-gpu-dashboard.json
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel,natel-discrete-panel
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=5s
    depends_on:
      - prometheus
      - dcgm-exporter
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Alertmanager for alert management and notification
  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # NAM Model Service
  nam-model-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "src.hana_ai.tools.hana_ml_tools.neural_additive_models_tools"]
    volumes:
      - ./src:/app/src
      - model_cache:/app/model_cache
    environment:
      - MODEL_CACHE_DIR=/app/model_cache
      - LOG_LEVEL=INFO
      - ENABLE_NAM_FEATURE_IMPORTANCE=true
    depends_on:
      - api
    restart: unless-stopped

volumes:
  api_logs:
  model_cache:
  nam_visualizations:
  prometheus_data:
  grafana_data:
  alertmanager_data: