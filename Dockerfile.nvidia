# Stage 1: Builder
FROM nvcr.io/nvidia/cuda:12.3.0-devel-ubuntu22.04 as builder

# Set environment variables for build stage
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    PYTHONPATH=/app \
    PIP_NO_CACHE_DIR=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip \
    python3-dev \
    build-essential \
    libpq-dev \
    curl \
    wget \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set up working directory
WORKDIR /app

# Copy requirements files
COPY requirements.txt .
COPY api/requirements.txt api/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir -r api/requirements.txt
RUN pip install --no-cache-dir flash-attn --no-build-isolation

# Install additional NVIDIA components for various GPU architectures
RUN pip install --no-cache-dir nvidia-cuda-nvrtc-cu12 nvidia-cuda-runtime-cu12 nvidia-cuda-cupti-cu12 \
    nvidia-cudnn-cu12 nvidia-cufft-cu12 nvidia-curand-cu12 nvidia-cusolver-cu12 \
    nvidia-cusparse-cu12 nvidia-nccl-cu12 nvidia-nvtx-cu12 nvidia-nvjitlink-cu12

# Stage 2: Runtime
FROM nvcr.io/nvidia/cuda:12.3.0-runtime-ubuntu22.04

# Set environment variables for runtime
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    PYTHONPATH=/app \
    HOME=/home/appuser

# Create non-root user
RUN groupadd -g 1000 appgroup && \
    useradd -u 1000 -g appgroup -m -s /bin/bash appuser

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-pip \
    ca-certificates \
    libpq5 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install security patches
RUN apt-get update && apt-get upgrade -y && apt-get clean && rm -rf /var/lib/apt/lists/*

# Set up working directory
WORKDIR /app

# Install TensorRT dependencies for T4 GPU
RUN pip install --no-cache-dir nvidia-tensorrt==8.6.1

# Copy installed packages from builder stage
COPY --from=builder /usr/local/lib/python3.*/site-packages /usr/local/lib/python3/dist-packages/
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY . /app/

# Set permissions for non-root user
RUN chown -R appuser:appgroup /app

# Create cache directory with appropriate permissions
RUN mkdir -p /tmp/quantization_cache && chown -R appuser:appgroup /tmp/quantization_cache

# Set environment variables for GPU optimization
ENV ENABLE_GPU_ACCELERATION=true \
    ENABLE_TENSORRT=true \
    ENABLE_GPTQ=true \
    ENABLE_AWQ=true \
    QUANTIZATION_BIT_WIDTH=4 \
    ENABLE_FP8=false \
    ENABLE_FLASH_ATTENTION_2=true \
    QUANTIZATION_CACHE_DIR=/tmp/quantization_cache \
    CUDA_VISIBLE_DEVICES=0 \
    T4_GPU_INT8_MODE=true \
    T4_GPU_FP16_MODE=true \
    T4_GPU_OPTIMIZATION_LEVEL=4

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Switch to non-root user
USER appuser

# Command to run the application
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]